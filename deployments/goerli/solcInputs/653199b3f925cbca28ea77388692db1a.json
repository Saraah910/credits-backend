{
  "language": "Solidity",
  "sources": {
    "contracts/ncs.sol": {
      "content": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.9;\r\n\r\nerror ncs__StudentAlreadyPresent();\r\nerror ncs__StudentNotPresent();\r\nerror ncs__studentNotEnrolledInTheCourse();\r\nerror ncs__studentEnrolledInTheCourse();\r\nerror ncs__notTheAdminError();\r\nerror ncs__approvedAlready();\r\n\r\ncontract ncs{\r\n\r\n    //1. storing student information.✅\r\n    //2. storing the enrolled courses and fees.✅\r\n    //3. Aproving degree certification.✅\r\n    //4. show collected credits.✅\r\n    //5. showing the collected degrees.✅\r\n\r\n    struct Student{\r\n        string Name;\r\n        uint256 Age;\r\n        string College;\r\n    }\r\n\r\n    address private immutable i_admin;\r\n    mapping(address => Student) private s_studentDetails;\r\n    mapping(address => mapping(string => uint256)) private courseToFees;\r\n    mapping(address => uint256) private totalCreditsEarned;\r\n    mapping(address => string []) private studentToCourseEnrolled;\r\n    uint256 requiredCredits = 0;\r\n    string[] private approvedCertificates;\r\n    address [] public existingStudent;\r\n\r\n    constructor(address admin){\r\n        i_admin = admin;\r\n    }\r\n\r\n    modifier notAlreadyPresent(address sender){\r\n        for(uint256 i=0; i<existingStudent.length; i++){\r\n            if(existingStudent[i] == sender){\r\n                revert ncs__StudentAlreadyPresent();\r\n            }else{\r\n                continue;\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier alreadyPresent(address sender){\r\n        bool flag = false;\r\n        for(uint256 i=0; i<existingStudent.length; i++){\r\n            if(existingStudent[i] == sender){\r\n                flag = true;\r\n            }else{\r\n                continue;\r\n            }\r\n        }\r\n        if(!flag){\r\n            revert ncs__StudentNotPresent();\r\n        }       \r\n        _; \r\n        \r\n    }\r\n\r\n    modifier alreadyEnrolled(address sender, string memory courseName){\r\n        bool flag = false;\r\n        for(uint256 i=0; i<studentToCourseEnrolled[sender].length; i++){\r\n            if(keccak256(bytes(courseName)) == keccak256(bytes(studentToCourseEnrolled[sender][i]))){\r\n                flag = true;\r\n            }\r\n        }\r\n        if(!flag){\r\n            revert ncs__studentNotEnrolledInTheCourse();\r\n        }\r\n        _;\r\n        \r\n    }\r\n\r\n    modifier NotEnrolled(address sender, string memory courseName){\r\n\r\n        for(uint256 i=0; i<studentToCourseEnrolled[sender].length; i++){\r\n            if(keccak256(bytes(courseName)) == keccak256(bytes(studentToCourseEnrolled[sender][i]))){\r\n                revert ncs__studentEnrolledInTheCourse();\r\n            }\r\n        }\r\n        _;\r\n        \r\n    }\r\n\r\n    modifier onlyAdmin(){\r\n        if(msg.sender != i_admin){\r\n            revert ncs__notTheAdminError();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier aprovedAlready(address sender, string memory courseName){\r\n        for(uint256 i=0; i<approvedCertificates.length; i++){\r\n            if(keccak256(bytes(approvedCertificates[i])) == keccak256(bytes(courseName))){\r\n                revert ncs__approvedAlready();\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    function addStudentDetails(string memory name, uint256 age, string memory college) notAlreadyPresent(msg.sender)external{\r\n        Student memory newStudent = Student({\r\n                                Name: name,\r\n                                Age: age,\r\n                                College:college\r\n                            });\r\n        existingStudent.push(msg.sender);\r\n        s_studentDetails[msg.sender] = newStudent;\r\n    }\r\n\r\n    function enrollIntoCourse(string memory courseName) alreadyPresent(msg.sender) NotEnrolled(msg.sender,courseName) external payable{\r\n        \r\n        uint256 CourseFees;\r\n\r\n        if(keccak256(bytes(courseName)) == keccak256(bytes(\"9th\")) || \r\n            keccak256(bytes(courseName)) == keccak256(bytes(\"10th\"))\r\n        ){\r\n            CourseFees = 2000000000000000000;\r\n            require(msg.value == CourseFees,\"Insufficient Funds\");\r\n            requiredCredits = 20;\r\n             \r\n        }\r\n        else if(keccak256(bytes(courseName)) == keccak256(bytes(\"11th\")) || \r\n            keccak256(bytes(courseName)) == keccak256(bytes(\"12th\"))\r\n        ){\r\n            CourseFees = 4000000000000000000;\r\n            require(msg.value == CourseFees,\"Insufficient Funds.\");\r\n            require(totalCreditsEarned[msg.sender] >= 40, \"Insufficient credits.\");\r\n            requiredCredits = 40;\r\n        }\r\n        else if(keccak256(bytes(courseName)) == keccak256(bytes(\"Diploma\")) || \r\n            keccak256(bytes(courseName)) == keccak256(bytes(\"Degree\")) ||\r\n            keccak256(bytes(courseName)) == keccak256(bytes(\"hm\")) || \r\n            keccak256(bytes(courseName)) == keccak256(bytes(\"art\"))\r\n        ){\r\n            CourseFees = 6000000000000000000;\r\n            require(msg.value == CourseFees,\"Insufficient Funds or not enough credits\");\r\n            require(totalCreditsEarned[msg.sender] >= 120,\"Insufficient credits.\");\r\n            requiredCredits = 60;\r\n        }\r\n        \r\n        studentToCourseEnrolled[msg.sender].push(courseName);\r\n        courseToFees[msg.sender][courseName] = CourseFees;\r\n\r\n    }\r\n\r\n    function AproveCertification(string memory courseName) \r\n        alreadyPresent(msg.sender) \r\n        alreadyEnrolled(msg.sender,courseName) \r\n        aprovedAlready(msg.sender,courseName) external{\r\n\r\n        if(keccak256(bytes(courseName)) == keccak256(bytes(\"9th\")) || \r\n            keccak256(bytes(courseName)) == keccak256(bytes(\"10th\"))\r\n        ){\r\n            totalCreditsEarned[msg.sender] += 20;\r\n        }\r\n        else if(keccak256(bytes(courseName)) == keccak256(bytes(\"11th\")) || \r\n            keccak256(bytes(courseName)) == keccak256(bytes(\"12th\"))\r\n        ){\r\n            totalCreditsEarned[msg.sender] += 40;\r\n        }\r\n        else if(keccak256(bytes(courseName)) == keccak256(bytes(\"Diploma\")) || \r\n            keccak256(bytes(courseName)) == keccak256(bytes(\"Degree\")) ||\r\n            keccak256(bytes(courseName)) == keccak256(bytes(\"hm\")) || \r\n            keccak256(bytes(courseName)) == keccak256(bytes(\"art\"))\r\n        ){\r\n            totalCreditsEarned[msg.sender] += 60;\r\n        }\r\n        \r\n        approvedCertificates.push(courseName);\r\n         \r\n    }\r\n\r\n    function withDrawFunds() onlyAdmin() external{\r\n        // courseToFees = new mapping(address => mapping(string => uint256))(\"\")(0);\r\n        for(uint256 i=0; i<existingStudent.length; i++){\r\n            // delete studentToCourseEnrolled[existingStudent[i]];\r\n            totalCreditsEarned[existingStudent[i]] = 0;\r\n            studentToCourseEnrolled[existingStudent[i]] = new string[](0);\r\n            approvedCertificates = new string[](0);\r\n            delete s_studentDetails[existingStudent[i]];\r\n        }\r\n        // delete existingStudent;\r\n        // existingStudent = new address[](0);\r\n        (bool success, ) = payable(msg.sender).call{value:address(this).balance}(\"\");\r\n        require(success, \"Funds transfer failed!\");\r\n    }\r\n\r\n    //View or pure functions\r\n    function showAllEnrolledCourses() alreadyPresent(msg.sender) external view returns(string [] memory){        \r\n        return studentToCourseEnrolled[msg.sender];        \r\n    }\r\n\r\n    function showAvailableCredits() alreadyPresent(msg.sender) external view returns(uint256){\r\n        return totalCreditsEarned[msg.sender];\r\n    }\r\n\r\n    function ShowDetailsofStudent() alreadyPresent(msg.sender) external view returns(Student memory){\r\n        return s_studentDetails[msg.sender];\r\n    }\r\n\r\n    function showApprovedCertification() external view returns(string []memory){\r\n        return approvedCertificates;\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}